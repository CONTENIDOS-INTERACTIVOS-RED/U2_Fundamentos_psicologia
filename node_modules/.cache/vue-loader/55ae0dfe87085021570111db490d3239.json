{"remainingRequest":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/src/views/curso/Tema1.vue?vue&type=template&id=332201b2&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/src/views/curso/Tema1.vue","mtime":1746508580762},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}