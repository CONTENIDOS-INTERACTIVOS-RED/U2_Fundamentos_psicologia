{"remainingRequest":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/src/views/curso/Tema2.vue?vue&type=template&id=fedfd1f6&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/src/views/curso/Tema2.vue","mtime":1746508580762},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_psicologia/U2_Fundamentos_psicologia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}